@use "sass:color";
@use "sass:list";
@use "../mixins/color.scss" as color-mixin;

$classes: ();
@include color-mixin.basic-color() using ($prop, $value) {
  $classes: list.append($classes, ".from-#{$prop}", $separator: comma) !global;
  $classes: list.append($classes, ".via-#{$prop}", $separator: comma) !global;
  $classes: list.append($classes, ".to-#{$prop}", $separator: comma) !global;
}
@include color-mixin.colorful() using ($color-name, $strength, $color) {
  $classes: list.append(
    $classes,
    ".from-#{$color-name}-#{$strength}",
    $separator: comma
  ) !global;
  $classes: list.append(
    $classes,
    ".via-#{$color-name}-#{$strength}",
    $separator: comma
  ) !global;
  $classes: list.append(
    $classes,
    ".to-#{$color-name}-#{$strength}",
    $separator: comma
  ) !global;
}
// define default gradient position variables
#{$classes} {
  --tw-gradient-from-position: ;
  --tw-gradient-via-position: ;
  --tw-gradient-to-position: ;
}

// Gradient position
@for $i from 0 through 20 {
  .from-#{$i*5}\% {
    --tw-gradient-from-position: #{$i * 5%};
  }
  .via-#{$i*5}\% {
    --tw-gradient-via-position: #{$i * 5%};
  }
  .to-#{$i*5}\% {
    --tw-gradient-to-position: #{$i * 5%};
  }
}

// Gradient colors
.from {
  @include color-mixin.basic-color() using ($prop, $value) {
    &-#{$prop} {
      --tw-gradient-from: #{$value} var(--tw-gradient-from-position);
      @if $prop == "inherit" or $prop == "current" {
        --tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position);
      } @else {
        --tw-gradient-to: #{color.change($value, $alpha: 0)}
          var(--tw-gradient-to-position);
      }
      --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
    }
  }
  @include color-mixin.colorful() using ($color-name, $strength, $color) {
    &-#{$color-name}-#{$strength} {
      --tw-gradient-from: #{$color} var(--tw-gradient-from-position);
      --tw-gradient-to: #{color.change($color, $alpha: 0)} var(--tw-gradient-to-position);
      --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
    }
  }
}
.via {
  @include color-mixin.basic-color() using ($prop, $value) {
    &-#{$prop} {
      @if $prop == "inherit" or $prop == "current" {
        --tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position);
      } @else {
        --tw-gradient-to: #{color.change($value, $alpha: 0)}
          var(--tw-gradient-to-position);
      }
      --tw-gradient-stops: var(--tw-gradient-from),
        #{$value} var(--tw-gradient-via-position), var(--tw-gradient-to);
    }
  }
  @include color-mixin.colorful() using ($color-name, $strength, $color) {
    &-#{$color-name}-#{$strength} {
      --tw-gradient-to: #{color.change($color, $alpha: 0)} var(--tw-gradient-to-position);
      --tw-gradient-stops: var(--tw-gradient-from),
        #{$color} var(--tw-gradient-via-position), var(--tw-gradient-to);
    }
  }
}
.to {
  @include color-mixin.basic-color() using ($prop, $value) {
    &-#{$prop} {
      --tw-gradient-to: #{$value} var(--tw-gradient-to-position);
    }
  }
  @include color-mixin.colorful() using ($color-name, $strength, $color) {
    &-#{$color-name}-#{$strength} {
      --tw-gradient-to: #{$color} var(--tw-gradient-to-position);
    }
  }
}
